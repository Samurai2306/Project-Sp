/**
 * üîß SERVICE WORKER –î–õ–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò
 * –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ñ–ª–∞–π–Ω-–ø–æ–¥–¥–µ—Ä–∂–∫–∞
 */

const CACHE_NAME = 'portfolio-v1.0.0';
const STATIC_CACHE = 'static-v1.0.0';
const DYNAMIC_CACHE = 'dynamic-v1.0.0';

// –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
const CRITICAL_RESOURCES = [
    '/',
    '/index.html',
    '/assets/css/style.css',
    '/assets/css/text-animation.css',
    '/assets/css/fonts.css',
    '/assets/js/main.js',
    '/assets/js/text-animation.js',
    '/assets/js/performance-optimizer.js',
    '/assets/images/LOGO.png',
    '/assets/fonts/minecraft.ttf',
    '/assets/fonts/belarus.otf',
    '/assets/fonts/Cakra-Normal.otf',
    '/assets/fonts/noodles.otf'
];

// –†–µ—Å—É—Ä—Å—ã –¥–ª—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏
const PRELOAD_RESOURCES = [
    '/assets/images/1.jpg',
    '/assets/images/2.jpg',
    '/assets/images/3.jpg',
    '/assets/icons/icons8-github.svg',
    '/assets/icons/icons8-tg.svg',
    '/assets/icons/icons8-gmail.svg',
    '/assets/icons/icons8-vk.svg',
    '/assets/icons/MyLifeTime.jpg',
    '/assets/icons/MestoSlov.png',
    '/assets/icons/development_icon_131032.svg',
    '/assets/icons/web_development_coding_code_browse_browser_icon-icons.com_59980.svg',
    '/assets/icons/stopwatch_watch_timer_time_clock_deadline_icon_220238.svg',
    '/assets/icons/3586372-brain-creative-idea-mind_107940.svg',
    '/assets/icons/devices_78336.svg'
];

// –°—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
const PAGES = [
    '/',
    '/index.html',
    '/projects.html',
    '/games.html',
    '/skills.html',
    '/order.html',
    '/contacts.html'
];

/**
 * üöÄ –£–°–¢–ê–ù–û–í–ö–ê SERVICE WORKER
 */
self.addEventListener('install', (event) => {
    console.log('üîß Service Worker: –£—Å—Ç–∞–Ω–æ–≤–∫–∞...');
    
    event.waitUntil(
        Promise.all([
            // –ö—ç—à–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã
            caches.open(STATIC_CACHE).then(cache => {
                console.log('üì¶ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤...');
                return cache.addAll(CRITICAL_RESOURCES);
            }),
            
            // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º –≤–∞–∂–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
            caches.open(DYNAMIC_CACHE).then(cache => {
                console.log('üîÑ –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...');
                return cache.addAll(PRELOAD_RESOURCES);
            })
        ]).then(() => {
            console.log('‚úÖ Service Worker: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ');
            return self.skipWaiting();
        })
    );
});

/**
 * üîÑ –ê–ö–¢–ò–í–ê–¶–ò–Ø SERVICE WORKER
 */
self.addEventListener('activate', (event) => {
    console.log('üîß Service Worker: –ê–∫—Ç–∏–≤–∞—Ü–∏—è...');
    
    event.waitUntil(
        Promise.all([
            // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫—ç—à–∏
            caches.keys().then(cacheNames => {
                return Promise.all(
                    cacheNames.map(cacheName => {
                        if (cacheName !== STATIC_CACHE && cacheName !== DYNAMIC_CACHE) {
                            console.log('üßπ –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –∫—ç—à–∞:', cacheName);
                            return caches.delete(cacheName);
                        }
                    })
                );
            }),
            
            // –ë–µ—Ä–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –≤—Å–µ–º–∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏
            self.clients.claim()
        ]).then(() => {
            console.log('‚úÖ Service Worker: –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
        })
    );
});

/**
 * üåê –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–ü–†–û–°–û–í
 */
self.addEventListener('fetch', (event) => {
    const request = event.request;
    const url = new URL(request.url);
    
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–Ω–µ—à–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã
    if (url.origin !== location.origin) {
        return;
    }
    
    // –°—Ç—Ä–∞—Ç–µ–≥–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ä–µ—Å—É—Ä—Å–∞
    if (request.destination === 'document') {
        event.respondWith(handlePageRequest(request));
    } else if (request.destination === 'image' || request.destination === 'font') {
        event.respondWith(handleAssetRequest(request));
    } else if (request.destination === 'script' || request.destination === 'style') {
        event.respondWith(handleResourceRequest(request));
    } else {
        event.respondWith(handleGenericRequest(request));
    }
});

/**
 * üìÑ –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–ü–†–û–°–û–í –°–¢–†–ê–ù–ò–¶
 */
async function handlePageRequest(request) {
    try {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∫—ç—à
        const cachedResponse = await caches.match(request);
        if (cachedResponse) {
            console.log('üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–∑ –∫—ç—à–∞:', request.url);
            return cachedResponse;
        }
        
        // –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∫—ç—à–µ, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ —Å–µ—Ç–∏
        const networkResponse = await fetch(request);
        
        // –ö—ç—à–∏—Ä—É–µ–º –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        if (networkResponse.ok) {
            const cache = await caches.open(DYNAMIC_CACHE);
            cache.put(request, networkResponse.clone());
        }
        
        return networkResponse;
    } catch (error) {
        console.warn('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', error);
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ñ–ª–∞–π–Ω-—Å—Ç—Ä–∞–Ω–∏—Ü—É
        return new Response(`
            <!DOCTYPE html>
            <html lang="ru">
            <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>–û—Ñ–ª–∞–π–Ω | –ì–ª–µ–± –ß–µ—Ä–Ω–æ–≤</title>
                <style>
                    body { 
                        font-family: Arial, sans-serif; 
                        text-align: center; 
                        padding: 50px; 
                        background: #0a0a0f; 
                        color: white; 
                    }
                    .offline-message { 
                        max-width: 500px; 
                        margin: 0 auto; 
                    }
                    .retry-btn { 
                        background: #8B5FBF; 
                        color: white; 
                        border: none; 
                        padding: 10px 20px; 
                        border-radius: 5px; 
                        cursor: pointer; 
                        margin-top: 20px; 
                    }
                </style>
            </head>
            <body>
                <div class="offline-message">
                    <h1>üîå –û—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º</h1>
                    <p>–ü–æ—Ö–æ–∂–µ, —É –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.</p>
                    <p>–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.</p>
                    <button class="retry-btn" onclick="location.reload()">–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞</button>
                </div>
            </body>
            </html>
        `, {
            headers: { 'Content-Type': 'text/html' }
        });
    }
}

/**
 * üñºÔ∏è –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–ü–†–û–°–û–í –ê–°–°–ï–¢–û–í
 */
async function handleAssetRequest(request) {
    try {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∫—ç—à
        const cachedResponse = await caches.match(request);
        if (cachedResponse) {
            console.log('üñºÔ∏è –ê—Å—Å–µ—Ç –∏–∑ –∫—ç—à–∞:', request.url);
            return cachedResponse;
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ —Å–µ—Ç–∏
        const networkResponse = await fetch(request);
        
        // –ö—ç—à–∏—Ä—É–µ–º –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        if (networkResponse.ok) {
            const cache = await caches.open(DYNAMIC_CACHE);
            cache.put(request, networkResponse.clone());
        }
        
        return networkResponse;
    } catch (error) {
        console.warn('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—Å—Å–µ—Ç–∞:', error);
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º placeholder –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        if (request.destination === 'image') {
            return new Response(`
                <svg width="200" height="200" xmlns="http://www.w3.org/2000/svg">
                    <rect width="100%" height="100%" fill="#1a1a2a"/>
                    <text x="50%" y="50%" text-anchor="middle" fill="#8B5FBF" font-family="Arial" font-size="14">
                        –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ
                    </text>
                </svg>
            `, {
                headers: { 'Content-Type': 'image/svg+xml' }
            });
        }
        
        throw error;
    }
}

/**
 * üìú –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–ü–†–û–°–û–í –†–ï–°–£–†–°–û–í
 */
async function handleResourceRequest(request) {
    try {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∫—ç—à
        const cachedResponse = await caches.match(request);
        if (cachedResponse) {
            console.log('üìú –†–µ—Å—É—Ä—Å –∏–∑ –∫—ç—à–∞:', request.url);
            return cachedResponse;
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ —Å–µ—Ç–∏
        const networkResponse = await fetch(request);
        
        // –ö—ç—à–∏—Ä—É–µ–º –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        if (networkResponse.ok) {
            const cache = await caches.open(STATIC_CACHE);
            cache.put(request, networkResponse.clone());
        }
        
        return networkResponse;
    } catch (error) {
        console.warn('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Å—É—Ä—Å–∞:', error);
        throw error;
    }
}

/**
 * üîÑ –û–ë–†–ê–ë–û–¢–ö–ê –û–ë–©–ò–• –ó–ê–ü–†–û–°–û–í
 */
async function handleGenericRequest(request) {
    try {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∫—ç—à
        const cachedResponse = await caches.match(request);
        if (cachedResponse) {
            return cachedResponse;
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ —Å–µ—Ç–∏
        const networkResponse = await fetch(request);
        
        // –ö—ç—à–∏—Ä—É–µ–º –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        if (networkResponse.ok) {
            const cache = await caches.open(DYNAMIC_CACHE);
            cache.put(request, networkResponse.clone());
        }
        
        return networkResponse;
    } catch (error) {
        console.warn('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
        throw error;
    }
}

/**
 * üì® –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô
 */
self.addEventListener('message', (event) => {
    const { type, data } = event.data;
    
    switch (type) {
        case 'SKIP_WAITING':
            self.skipWaiting();
            break;
            
        case 'CLEAR_CACHE':
            clearAllCaches();
            break;
            
        case 'GET_CACHE_SIZE':
            getCacheSize().then(size => {
                event.ports[0].postMessage({ type: 'CACHE_SIZE', size });
            });
            break;
            
        case 'PRELOAD_RESOURCES':
            preloadResources(data.resources);
            break;
    }
});

/**
 * üßπ –û–ß–ò–°–¢–ö–ê –í–°–ï–• –ö–≠–®–ï–ô
 */
async function clearAllCaches() {
    const cacheNames = await caches.keys();
    await Promise.all(
        cacheNames.map(cacheName => caches.delete(cacheName))
    );
    console.log('üßπ –í—Å–µ –∫—ç—à–∏ –æ—á–∏—â–µ–Ω—ã');
}

/**
 * üìä –ü–û–õ–£–ß–ï–ù–ò–ï –†–ê–ó–ú–ï–†–ê –ö–≠–®–ê
 */
async function getCacheSize() {
    const cacheNames = await caches.keys();
    let totalSize = 0;
    
    for (const cacheName of cacheNames) {
        const cache = await caches.open(cacheName);
        const keys = await cache.keys();
        totalSize += keys.length;
    }
    
    return totalSize;
}

/**
 * üîÑ –ü–†–ï–î–ó–ê–ì–†–£–ó–ö–ê –†–ï–°–£–†–°–û–í
 */
async function preloadResources(resources) {
    const cache = await caches.open(DYNAMIC_CACHE);
    
    for (const resource of resources) {
        try {
            const response = await fetch(resource);
            if (response.ok) {
                await cache.put(resource, response);
                console.log('üì¶ –†–µ—Å—É—Ä—Å –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω:', resource);
            }
        } catch (error) {
            console.warn('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏:', resource, error);
        }
    }
}

/**
 * üîî –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø
 */
self.addEventListener('push', (event) => {
    if (event.data) {
        const data = event.data.json();
        
        const options = {
            body: data.body,
            icon: '/assets/images/LOGO.png',
            badge: '/assets/images/LOGO.png',
            vibrate: [100, 50, 100],
            data: {
                dateOfArrival: Date.now(),
                primaryKey: 1
            }
        };
        
        event.waitUntil(
            self.registration.showNotification(data.title, options)
        );
    }
});

/**
 * üîî –û–ë–†–ê–ë–û–¢–ö–ê –ö–õ–ò–ö–û–í –ü–û –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø–ú
 */
self.addEventListener('notificationclick', (event) => {
    event.notification.close();
    
    event.waitUntil(
        clients.openWindow('/')
    );
});

console.log('üîß Service Worker –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
