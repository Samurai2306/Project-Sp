/**
 * üß† –ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–û–ï –£–ü–†–ê–í–õ–ï–ù–ò–ï –î–ê–ù–ù–´–ú–ò
 * –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–∏, –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
 */

class SmartDataManager {
    constructor() {
        this.dataCache = new Map();
        this.pendingRequests = new Map();
        this.dataPriorities = new Map();
        this.invalidationRules = new Map();
        this.syncQueue = [];
        this.isOnline = navigator.onLine;
        
        this.init();
    }

    /**
     * üöÄ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´
     */
    init() {
        console.log('üß† –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏...');
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –¥–∞–Ω–Ω—ã—Ö
        this.setupDataPriorities();
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤–∏–ª –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏
        this.setupInvalidationRules();
        
        // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ç–∏
        this.setupNetworkMonitoring();
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
        this.setupAutoSync();
        
        console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    }

    /**
     * üìä –ù–ê–°–¢–†–û–ô–ö–ê –ü–†–ò–û–†–ò–¢–ï–¢–û–í –î–ê–ù–ù–´–•
     */
    setupDataPriorities() {
        // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ (–∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è —Å—Ä–∞–∑—É)
        this.dataPriorities.set('user-profile', 1);
        this.dataPriorities.set('navigation', 1);
        this.dataPriorities.set('critical-images', 1);
        
        // –í–∞–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –ø–æ—Å–ª–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö)
        this.dataPriorities.set('projects-data', 2);
        this.dataPriorities.set('skills-data', 2);
        this.dataPriorities.set('games-data', 2);
        
        // –°—Ä–µ–¥–Ω–µ–π –≤–∞–∂–Ω–æ—Å—Ç–∏ (–∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –≤ —Ñ–æ–Ω–µ)
        this.dataPriorities.set('analytics', 3);
        this.dataPriorities.set('user-preferences', 3);
        
        // –ù–∏–∑–∫–æ–π –≤–∞–∂–Ω–æ—Å—Ç–∏ (–∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é)
        this.dataPriorities.set('background-images', 4);
        this.dataPriorities.set('optional-content', 4);
    }

    /**
     * ‚è∞ –ù–ê–°–¢–†–û–ô–ö–ê –ü–†–ê–í–ò–õ –ò–ù–í–ê–õ–ò–î–ê–¶–ò–ò
     */
    setupInvalidationRules() {
        // –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        this.invalidationRules.set('user-profile', { type: 'time', value: 3600000 }); // 1 —á–∞—Å
        this.invalidationRules.set('projects-data', { type: 'time', value: 1800000 }); // 30 –º–∏–Ω—É—Ç
        this.invalidationRules.set('skills-data', { type: 'time', value: 7200000 }); // 2 —á–∞—Å–∞
        this.invalidationRules.set('games-data', { type: 'time', value: 86400000 }); // 24 —á–∞—Å–∞
        
        // –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ —Å–æ–±—ã—Ç–∏—è–º
        this.invalidationRules.set('navigation', { type: 'event', value: 'route-change' });
        this.invalidationRules.set('user-preferences', { type: 'event', value: 'preference-change' });
        
        // –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ –≤–µ—Ä—Å–∏–∏
        this.invalidationRules.set('critical-images', { type: 'version', value: '1.0.0' });
    }

    /**
     * üåê –ú–û–ù–ò–¢–û–†–ò–ù–ì –°–û–°–¢–û–Ø–ù–ò–Ø –°–ï–¢–ò
     */
    setupNetworkMonitoring() {
        window.addEventListener('online', () => {
            this.isOnline = true;
            console.log('üåê –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
            this.processSyncQueue();
        });
        
        window.addEventListener('offline', () => {
            this.isOnline = false;
            console.log('üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ');
        });
    }

    /**
     * üîÑ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø
     */
    setupAutoSync() {
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        setInterval(() => {
            if (this.isOnline) {
                this.syncData();
            }
        }, 300000);
        
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        document.addEventListener('visibilitychange', () => {
            if (!document.hidden && this.isOnline) {
                this.syncData();
            }
        });
    }

    /**
     * üì¶ –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• –° –ü–†–ò–û–†–ò–¢–ò–ó–ê–¶–ò–ï–ô
     */
    async loadData(key, url, options = {}) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        const cached = this.getCachedData(key);
        if (cached && !this.isDataInvalid(key, cached)) {
            console.log(`üì¶ –î–∞–Ω–Ω—ã–µ ${key} –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –∫—ç—à–∞`);
            return cached.data;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ
        if (this.pendingRequests.has(key)) {
            console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ ${key}...`);
            return this.pendingRequests.get(key);
        }
        
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–∏—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
        const loadPromise = this.fetchData(url, options);
        this.pendingRequests.set(key, loadPromise);
        
        try {
            const data = await loadPromise;
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            this.setCachedData(key, data, options);
            
            // –£–¥–∞–ª—è–µ–º –∏–∑ –æ–∂–∏–¥–∞—é—â–∏—Ö
            this.pendingRequests.delete(key);
            
            console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ ${key} –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ`);
            return data;
        } catch (error) {
            this.pendingRequests.delete(key);
            console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${key}:`, error);
            throw error;
        }
    }

    /**
     * üåê –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–•
     */
    async fetchData(url, options = {}) {
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), options.timeout || 10000);
        
        try {
            const response = await fetch(url, {
                ...options,
                signal: controller.signal
            });
            
            clearTimeout(timeoutId);
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            
            return await response.json();
        } catch (error) {
            clearTimeout(timeoutId);
            throw error;
        }
    }

    /**
     * üíæ –ü–û–õ–£–ß–ï–ù–ò–ï –î–ê–ù–ù–´–• –ò–ó –ö–≠–®–ê
     */
    getCachedData(key) {
        const cached = this.dataCache.get(key);
        if (!cached) return null;
        
        return {
            data: cached.data,
            timestamp: cached.timestamp,
            version: cached.version
        };
    }

    /**
     * üíæ –°–û–•–†–ê–ù–ï–ù–ò–ï –î–ê–ù–ù–´–• –í –ö–≠–®
     */
    setCachedData(key, data, options = {}) {
        this.dataCache.set(key, {
            data,
            timestamp: Date.now(),
            version: options.version || '1.0.0'
        });
    }

    /**
     * ‚è∞ –ü–†–û–í–ï–†–ö–ê –ò–ù–í–ê–õ–ò–î–ê–¶–ò–ò –î–ê–ù–ù–´–•
     */
    isDataInvalid(key, cached) {
        const rule = this.invalidationRules.get(key);
        if (!rule) return false;
        
        switch (rule.type) {
            case 'time':
                return Date.now() - cached.timestamp > rule.value;
            case 'version':
                return cached.version !== rule.value;
            case 'event':
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ–∏–∑–æ—à–ª–æ –ª–∏ —Å–æ–±—ã—Ç–∏–µ
                return this.hasEventOccurred(rule.value);
            default:
                return false;
        }
    }

    /**
     * üìÖ –ü–†–û–í–ï–†–ö–ê –°–û–ë–´–¢–ò–ô
     */
    hasEventOccurred(eventType) {
        // –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å EventBus
        return false;
    }

    /**
     * üîÑ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –î–ê–ù–ù–´–•
     */
    async syncData() {
        if (!this.isOnline) {
            console.log('üîå –û—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–ª–æ–∂–µ–Ω–∞');
            return;
        }
        
        console.log('üîÑ –ù–∞—á–∞–ª–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö...');
        
        const syncPromises = [];
        
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        for (const [key, priority] of this.dataPriorities) {
            if (priority <= 2) { // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏ –≤–∞–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                syncPromises.push(this.syncDataKey(key));
            }
        }
        
        try {
            await Promise.all(syncPromises);
            console.log('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
        }
    }

    /**
     * üîÑ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ö–û–ù–ö–†–ï–¢–ù–´–• –î–ê–ù–ù–´–•
     */
    async syncDataKey(key) {
        try {
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º
            console.log(`üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è ${key}...`);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º timestamp
            const cached = this.dataCache.get(key);
            if (cached) {
                cached.timestamp = Date.now();
            }
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ ${key}:`, error);
        }
    }

    /**
     * üìã –û–ë–†–ê–ë–û–¢–ö–ê –û–ß–ï–†–ï–î–ò –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò
     */
    async processSyncQueue() {
        if (this.syncQueue.length === 0) return;
        
        console.log(`üìã –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (${this.syncQueue.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤)...`);
        
        const queue = [...this.syncQueue];
        this.syncQueue = [];
        
        for (const item of queue) {
            try {
                await this.syncDataKey(item.key);
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ ${item.key}:`, error);
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –ø—Ä–∏ –æ—à–∏–±–∫–µ
                this.syncQueue.push(item);
            }
        }
    }

    /**
     * üéØ –ü–†–ï–î–ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–•
     */
    async preloadData(dataConfig) {
        const preloadPromises = [];
        
        for (const config of dataConfig) {
            const { key, url, priority = 3 } = config;
            
            // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –≤ –∫—ç—à–µ –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–∏
            const cached = this.getCachedData(key);
            if (!cached || this.isDataInvalid(key, cached)) {
                preloadPromises.push(
                    this.loadData(key, url, { priority })
                );
            }
        }
        
        try {
            await Promise.all(preloadPromises);
            console.log('‚úÖ –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏:', error);
        }
    }

    /**
     * üßπ –û–ß–ò–°–¢–ö–ê –ö–≠–®–ê
     */
    clearCache(pattern = null) {
        if (pattern) {
            // –û—á–∏—â–∞–µ–º –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
            for (const key of this.dataCache.keys()) {
                if (key.includes(pattern)) {
                    this.dataCache.delete(key);
                }
            }
        } else {
            // –û—á–∏—â–∞–µ–º –≤–µ—Å—å –∫—ç—à
            this.dataCache.clear();
        }
        
        console.log('üßπ –ö—ç—à –æ—á–∏—â–µ–Ω');
    }

    /**
     * üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–ê–ù–ù–´–•
     */
    getDataStats() {
        const stats = {
            totalKeys: this.dataCache.size,
            pendingRequests: this.pendingRequests.size,
            syncQueueLength: this.syncQueue.length,
            isOnline: this.isOnline,
            cacheSize: this.calculateCacheSize()
        };
        
        return stats;
    }

    /**
     * üìè –†–ê–°–ß–ï–¢ –†–ê–ó–ú–ï–†–ê –ö–≠–®–ê
     */
    calculateCacheSize() {
        let totalSize = 0;
        
        for (const [key, value] of this.dataCache) {
            totalSize += JSON.stringify(value).length;
        }
        
        return totalSize;
    }

    /**
     * üéØ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò
     */
    optimizePerformance() {
        // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
        const now = Date.now();
        const maxAge = 24 * 60 * 60 * 1000; // 24 —á–∞—Å–∞
        
        for (const [key, value] of this.dataCache) {
            if (now - value.timestamp > maxAge) {
                this.dataCache.delete(key);
            }
        }
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞
        const maxCacheSize = 50; // –ú–∞–∫—Å–∏–º—É–º 50 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        if (this.dataCache.size > maxCacheSize) {
            const entries = Array.from(this.dataCache.entries());
            entries.sort((a, b) => a[1].timestamp - b[1].timestamp);
            
            const toDelete = entries.slice(0, this.dataCache.size - maxCacheSize);
            toDelete.forEach(([key]) => this.dataCache.delete(key));
        }
        
        console.log('‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = SmartDataManager;
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
if (typeof window !== 'undefined') {
    window.SmartDataManager = SmartDataManager;
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    document.addEventListener('DOMContentLoaded', () => {
        window.smartDataManager = new SmartDataManager();
    });
}
