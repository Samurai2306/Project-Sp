/**
 * üìä –°–ò–°–¢–ï–ú–ê –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò
 * –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
 */

class PerformanceMonitor {
    constructor() {
        this.metrics = {
            fps: 0,
            memory: 0,
            loadTime: 0,
            renderTime: 0,
            networkSpeed: 'unknown'
        };
        
        this.thresholds = {
            fps: 30,
            memory: 0.8, // 80% –æ—Ç –ª–∏–º–∏—Ç–∞
            loadTime: 3000, // 3 —Å–µ–∫—É–Ω–¥—ã
            renderTime: 16 // 60 FPS
        };
        
        this.isMonitoring = false;
        this.optimizations = [];
        
        this.init();
    }

    /**
     * üöÄ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê
     */
    init() {
        console.log('üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...');
        
        // –ù–∞—á–∏–Ω–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        this.startMonitoring();
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        this.setupAutoOptimizations();
        
        // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–±—ã—Ç–∏–π
        this.setupEventMonitoring();
        
        console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    }

    /**
     * üìà –ù–ê–ß–ê–õ–û –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê
     */
    startMonitoring() {
        if (this.isMonitoring) return;
        
        this.isMonitoring = true;
        
        // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ FPS
        this.monitorFPS();
        
        // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞–º—è—Ç–∏
        this.monitorMemory();
        
        // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–≥—Ä—É–∑–∫–∏
        this.monitorLoadTime();
        
        // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∫–æ—Ä–æ—Å—Ç–∏ —Å–µ—Ç–∏
        this.monitorNetworkSpeed();
        
        console.log('üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–ø—É—â–µ–Ω');
    }

    /**
     * üéØ –ú–û–ù–ò–¢–û–†–ò–ù–ì FPS
     */
    monitorFPS() {
        let fps = 0;
        let lastTime = performance.now();
        let frameCount = 0;
        
        const measureFPS = () => {
            const now = performance.now();
            frameCount++;
            
            if (now - lastTime >= 1000) {
                fps = Math.round((frameCount * 1000) / (now - lastTime));
                this.metrics.fps = fps;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥ FPS
                if (fps < this.thresholds.fps) {
                    this.triggerOptimization('low-fps', { fps });
                }
                
                frameCount = 0;
                lastTime = now;
            }
            
            if (this.isMonitoring) {
                requestAnimationFrame(measureFPS);
            }
        };
        
        measureFPS();
    }

    /**
     * üíæ –ú–û–ù–ò–¢–û–†–ò–ù–ì –ü–ê–ú–Ø–¢–ò
     */
    monitorMemory() {
        if (!('memory' in performance)) return;
        
        const checkMemory = () => {
            const memory = performance.memory;
            const usage = memory.usedJSHeapSize / memory.jsHeapSizeLimit;
            this.metrics.memory = usage;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥ –ø–∞–º—è—Ç–∏
            if (usage > this.thresholds.memory) {
                this.triggerOptimization('high-memory', { usage });
            }
            
            if (this.isMonitoring) {
                setTimeout(checkMemory, 5000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
            }
        };
        
        checkMemory();
    }

    /**
     * ‚è±Ô∏è –ú–û–ù–ò–¢–û–†–ò–ù–ì –í–†–ï–ú–ï–ù–ò –ó–ê–ì–†–£–ó–ö–ò
     */
    monitorLoadTime() {
        window.addEventListener('load', () => {
            const loadTime = performance.timing.loadEventEnd - performance.timing.navigationStart;
            this.metrics.loadTime = loadTime;
            
            console.log(`‚è±Ô∏è –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏: ${loadTime}ms`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–≥—Ä—É–∑–∫–∏
            if (loadTime > this.thresholds.loadTime) {
                this.triggerOptimization('slow-load', { loadTime });
            }
        });
    }

    /**
     * üåê –ú–û–ù–ò–¢–û–†–ò–ù–ì –°–ö–û–†–û–°–¢–ò –°–ï–¢–ò
     */
    monitorNetworkSpeed() {
        if ('connection' in navigator) {
            const connection = navigator.connection;
            this.metrics.networkSpeed = connection.effectiveType;
            
            // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–æ–¥ —Å–∫–æ—Ä–æ—Å—Ç—å —Å–µ—Ç–∏
            this.adaptToNetworkSpeed(connection);
        }
    }

    /**
     * üîß –ê–î–ê–ü–¢–ê–¶–ò–Ø –ü–û–î –°–ö–û–†–û–°–¢–¨ –°–ï–¢–ò
     */
    adaptToNetworkSpeed(connection) {
        const speed = connection.effectiveType;
        
        if (speed === 'slow-2g' || speed === '2g') {
            this.triggerOptimization('slow-network', { speed });
        } else if (speed === '3g') {
            this.triggerOptimization('medium-network', { speed });
        }
    }

    /**
     * ‚ö° –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ï –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò
     */
    setupAutoOptimizations() {
        // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –Ω–∏–∑–∫–æ–º FPS
        this.optimizations.push({
            trigger: 'low-fps',
            action: () => {
                console.log('‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –ù–∏–∑–∫–∏–π FPS');
                this.disableHeavyAnimations();
                this.reduceParticleCount();
            }
        });
        
        // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–µ –ø–∞–º—è—Ç–∏
        this.optimizations.push({
            trigger: 'high-memory',
            action: () => {
                console.log('‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –í—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø–∞–º—è—Ç–∏');
                this.clearUnusedCache();
                this.reduceImageQuality();
            }
        });
        
        // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –º–µ–¥–ª–µ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
        this.optimizations.push({
            trigger: 'slow-load',
            action: () => {
                console.log('‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –ú–µ–¥–ª–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞');
                this.enableLazyLoading();
                this.deferNonCriticalResources();
            }
        });
        
        // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –º–µ–¥–ª–µ–Ω–Ω–æ–π —Å–µ—Ç–∏
        this.optimizations.push({
            trigger: 'slow-network',
            action: () => {
                console.log('‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –ú–µ–¥–ª–µ–Ω–Ω–∞—è —Å–µ—Ç—å');
                this.disableNonEssentialFeatures();
                this.enableAggressiveCaching();
            }
        });
    }

    /**
     * üéØ –ó–ê–ü–£–°–ö –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò
     */
    triggerOptimization(trigger, data) {
        const optimization = this.optimizations.find(opt => opt.trigger === trigger);
        if (optimization) {
            optimization.action(data);
        }
    }

    /**
     * üé® –û–¢–ö–õ–Æ–ß–ï–ù–ò–ï –¢–Ø–ñ–ï–õ–´–• –ê–ù–ò–ú–ê–¶–ò–ô
     */
    disableHeavyAnimations() {
        document.documentElement.classList.add('reduced-motion');
        
        // –û—Ç–∫–ª—é—á–∞–µ–º —á–∞—Å—Ç–∏—Ü—ã
        const particleCanvas = document.querySelector('.particle-canvas');
        if (particleCanvas) {
            particleCanvas.style.display = 'none';
        }
        
        // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–±–∏–∫–æ–≤
        const cubes = document.querySelectorAll('.die');
        if (cubes.length > 2) {
            for (let i = 2; i < cubes.length; i++) {
                cubes[i].style.display = 'none';
            }
        }
    }

    /**
     * üî¢ –£–ú–ï–ù–¨–®–ï–ù–ò–ï –ö–û–õ–ò–ß–ï–°–¢–í–ê –ß–ê–°–¢–ò–¶
     */
    reduceParticleCount() {
        // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–∏—Ü –≤ 3 —Ä–∞–∑–∞
        const style = document.createElement('style');
        style.textContent = `
            .particle-canvas {
                display: none !important;
            }
        `;
        document.head.appendChild(style);
    }

    /**
     * üßπ –û–ß–ò–°–¢–ö–ê –ù–ï–ò–°–ü–û–õ–¨–ó–£–ï–ú–û–ì–û –ö–≠–®–ê
     */
    clearUnusedCache() {
        // –û—á–∏—â–∞–µ–º –∫—ç—à –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        if (window.performanceOptimizer) {
            window.performanceOptimizer.clearCache();
        }
        
        // –û—á–∏—â–∞–µ–º –∫—ç—à –¥–∞–Ω–Ω—ã—Ö
        if (window.smartDataManager) {
            window.smartDataManager.clearCache();
        }
    }

    /**
     * üñºÔ∏è –£–ú–ï–ù–¨–®–ï–ù–ò–ï –ö–ê–ß–ï–°–¢–í–ê –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô
     */
    reduceImageQuality() {
        const images = document.querySelectorAll('img');
        images.forEach(img => {
            img.style.imageRendering = 'pixelated';
            img.style.filter = 'blur(0.5px)';
        });
    }

    /**
     * üîÑ –í–ö–õ–Æ–ß–ï–ù–ò–ï LAZY LOADING
     */
    enableLazyLoading() {
        const images = document.querySelectorAll('img');
        images.forEach(img => {
            if (!img.hasAttribute('loading')) {
                img.setAttribute('loading', 'lazy');
            }
        });
    }

    /**
     * ‚è≥ –û–¢–õ–û–ñ–ï–ù–ù–ê–Ø –ó–ê–ì–†–£–ó–ö–ê –ù–ï–ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –†–ï–°–£–†–°–û–í
     */
    deferNonCriticalResources() {
        // –û—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ç—è–∂–µ–ª—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤
        const heavyScripts = document.querySelectorAll('script[src*="three"], script[src*="gsap"]');
        heavyScripts.forEach(script => {
            script.defer = true;
        });
    }

    /**
     * üö´ –û–¢–ö–õ–Æ–ß–ï–ù–ò–ï –ù–ï–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–• –§–£–ù–ö–¶–ò–ô
     */
    disableNonEssentialFeatures() {
        // –û—Ç–∫–ª—é—á–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏
        document.documentElement.classList.add('slow-connection');
        
        // –û—Ç–∫–ª—é—á–∞–µ–º —Ç—è–∂–µ–ª—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
        this.disableHeavyAnimations();
    }

    /**
     * üíæ –ê–ì–†–ï–°–°–ò–í–ù–û–ï –ö–≠–®–ò–†–û–í–ê–ù–ò–ï
     */
    enableAggressiveCaching() {
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        if (window.performanceOptimizer) {
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
            console.log('üíæ –í–∫–ª—é—á–µ–Ω–æ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ');
        }
    }

    /**
     * üìä –ú–û–ù–ò–¢–û–†–ò–ù–ì –°–û–ë–´–¢–ò–ô
     */
    setupEventMonitoring() {
        // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∫—Ä–æ–ª–ª–∞
        let scrollTimeout;
        window.addEventListener('scroll', () => {
            clearTimeout(scrollTimeout);
            scrollTimeout = setTimeout(() => {
                this.measureScrollPerformance();
            }, 100);
        });
        
        // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å–∞–π–∑–∞
        let resizeTimeout;
        window.addEventListener('resize', () => {
            clearTimeout(resizeTimeout);
            resizeTimeout = setTimeout(() => {
                this.measureResizePerformance();
            }, 250);
        });
    }

    /**
     * üìú –ò–ó–ú–ï–†–ï–ù–ò–ï –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò –°–ö–†–û–õ–õ–ê
     */
    measureScrollPerformance() {
        const startTime = performance.now();
        
        requestAnimationFrame(() => {
            const endTime = performance.now();
            const renderTime = endTime - startTime;
            
            if (renderTime > this.thresholds.renderTime) {
                this.triggerOptimization('slow-scroll', { renderTime });
            }
        });
    }

    /**
     * üìè –ò–ó–ú–ï–†–ï–ù–ò–ï –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò –†–ï–°–ê–ô–ó–ê
     */
    measureResizePerformance() {
        const startTime = performance.now();
        
        requestAnimationFrame(() => {
            const endTime = performance.now();
            const renderTime = endTime - startTime;
            
            if (renderTime > this.thresholds.renderTime) {
                this.triggerOptimization('slow-resize', { renderTime });
            }
        });
    }

    /**
     * üìä –ü–û–õ–£–ß–ï–ù–ò–ï –ú–ï–¢–†–ò–ö
     */
    getMetrics() {
        return {
            ...this.metrics,
            timestamp: Date.now(),
            optimizations: this.optimizations.length
        };
    }

    /**
     * üìà –û–¢–ß–ï–¢ –û –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò
     */
    generateReport() {
        const metrics = this.getMetrics();
        const report = {
            timestamp: new Date().toISOString(),
            metrics,
            recommendations: this.generateRecommendations(metrics)
        };
        
        console.log('üìä –û—Ç—á–µ—Ç –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:', report);
        return report;
    }

    /**
     * üí° –ì–ï–ù–ï–†–ê–¶–ò–Ø –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ô
     */
    generateRecommendations(metrics) {
        const recommendations = [];
        
        if (metrics.fps < 30) {
            recommendations.push('–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—Ç–∫–ª—é—á–∏—Ç—å —Ç—è–∂–µ–ª—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏');
        }
        
        if (metrics.memory > 0.8) {
            recommendations.push('–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –∏ —É–º–µ–Ω—å—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π');
        }
        
        if (metrics.loadTime > 3000) {
            recommendations.push('–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É —Ä–µ—Å—É—Ä—Å–æ–≤');
        }
        
        return recommendations;
    }

    /**
     * üõë –û–°–¢–ê–ù–û–í–ö–ê –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê
     */
    stopMonitoring() {
        this.isMonitoring = false;
        console.log('üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = PerformanceMonitor;
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
if (typeof window !== 'undefined') {
    window.PerformanceMonitor = PerformanceMonitor;
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    document.addEventListener('DOMContentLoaded', () => {
        window.performanceMonitor = new PerformanceMonitor();
    });
}
